// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: todo.proto

package goapi

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Item with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Item with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ItemMultiError, or nil if none found.
func (m *Item) ValidateAll() error {
	return m.validate(true)
}

func (m *Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	if len(errors) > 0 {
		return ItemMultiError(errors)
	}

	return nil
}

// ItemMultiError is an error wrapping multiple validation errors returned by
// Item.ValidateAll() if the designated constraints aren't met.
type ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemMultiError) AllErrors() []error { return m }

// ItemValidationError is the validation error returned by Item.Validate if the
// designated constraints aren't met.
type ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemValidationError) ErrorName() string { return "ItemValidationError" }

// Error satisfies the builtin error interface
func (e ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemValidationError{}

// Validate checks the field values on ItemList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemListMultiError, or nil
// if none found.
func (m *ItemList) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemListValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ItemListMultiError(errors)
	}

	return nil
}

// ItemListMultiError is an error wrapping multiple validation errors returned
// by ItemList.ValidateAll() if the designated constraints aren't met.
type ItemListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemListMultiError) AllErrors() []error { return m }

// ItemListValidationError is the validation error returned by
// ItemList.Validate if the designated constraints aren't met.
type ItemListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemListValidationError) ErrorName() string { return "ItemListValidationError" }

// Error satisfies the builtin error interface
func (e ItemListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemListValidationError{}

// Validate checks the field values on AddItemRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddItemRequestMultiError,
// or nil if none found.
func (m *AddItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if len(errors) > 0 {
		return AddItemRequestMultiError(errors)
	}

	return nil
}

// AddItemRequestMultiError is an error wrapping multiple validation errors
// returned by AddItemRequest.ValidateAll() if the designated constraints
// aren't met.
type AddItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddItemRequestMultiError) AllErrors() []error { return m }

// AddItemRequestValidationError is the validation error returned by
// AddItemRequest.Validate if the designated constraints aren't met.
type AddItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddItemRequestValidationError) ErrorName() string { return "AddItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddItemRequestValidationError{}

// Validate checks the field values on RemoveItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveItemRequestMultiError, or nil if none found.
func (m *RemoveItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveItemRequestMultiError(errors)
	}

	return nil
}

// RemoveItemRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveItemRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveItemRequestMultiError) AllErrors() []error { return m }

// RemoveItemRequestValidationError is the validation error returned by
// RemoveItemRequest.Validate if the designated constraints aren't met.
type RemoveItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveItemRequestValidationError) ErrorName() string {
	return "RemoveItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveItemRequestValidationError{}
